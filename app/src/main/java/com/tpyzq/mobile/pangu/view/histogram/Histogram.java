package com.tpyzq.mobile.pangu.view.histogram;import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.RectF;import android.util.AttributeSet;import android.view.View;import com.tpyzq.mobile.pangu.util.ColorUtils;import java.text.DecimalFormat;import java.util.Arrays;/** * Created by 陈新宇 on 2016/10/28. * 上下样式柱状图 */public class Histogram extends View {    //中间的灰线    Paint mLinePaint;    //柱状    Paint cylinder;    RectF rectF;    //  绘制文本的画笔    private Paint textPaint;    //5 条    private float[] thisPrice;    //时间轴    private String[] date;    /**     * 视图的宽和高     */    public void updateThisData(float[] thisPrice, String[] date) {        this.thisPrice = thisPrice;        this.date = date;        this.postInvalidate();  //可以子线程 更新视图的方法调用。    }    private int mTotalWidth, mTotalHeight;    public Histogram(Context context) {        super(context);    }    public Histogram(Context context, AttributeSet attrs) {        super(context, attrs);    }    public Histogram(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    @Override    protected void onSizeChanged(int w, int h, int oldw, int oldh) {        super.onSizeChanged(w, h, oldw, oldh);        mTotalWidth = w - getPaddingLeft() - getPaddingRight();        mTotalHeight = h - getPaddingTop() - getPaddingBottom();    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        setMeasuredDimension(widthMeasureSpec, heightMeasureSpec);    }    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        init(canvas);//        canvas.drawRect(rectF, cylinder);    }    private void init(Canvas canvas) {        mLinePaint = new Paint();        mLinePaint.setAntiAlias(true);        mLinePaint.setStyle(Paint.Style.FILL);        mLinePaint.setColor(Color.GRAY);        mLinePaint.setStrokeWidth(1);        cylinder = new Paint();        cylinder.setAntiAlias(true);        cylinder.setStyle(Paint.Style.FILL);        cylinder.setColor(ColorUtils.RED);        textPaint = new Paint();        textPaint.setAntiAlias(true);        textPaint.setStyle(Paint.Style.FILL);        textPaint.setTextSize(dp2px(12));        textPaint.setColor(ColorUtils.RED);        if (thisPrice != null && thisPrice.length > 0) {            //开始绘制            canvas.drawLine(dp2px(20), mTotalHeight / 2 - dp2px(20), mTotalWidth - dp2px(20), mTotalHeight / 2 - dp2px(20), mLinePaint);            //获取传入数值的总值            float allnum = Math.abs(thisPrice[0]) + Math.abs(thisPrice[1]) + Math.abs(thisPrice[2]) + Math.abs(thisPrice[3]) + Math.abs(thisPrice[4]);            //view的高度            int allHeight = (mTotalHeight - dp2px(50)) / 2;            //x中心点坐标            int centerWidth = mTotalWidth / 2;            //y中心点坐标            int centerHeith = mTotalHeight / 2 - dp2px(20);            //六等分的距离            int pad = (mTotalWidth - dp2px(40)) / 6;            //左坐标            int left = 0;            //右坐标            int right = 0;            for (int i = 0; i < 5; i++) {                switch (i) {                    case 0:                        left = centerWidth - pad * 2 - dp2px(15);                        right = centerWidth - pad * 2 + dp2px(15);                        setRectF(i, left, right, allHeight, centerHeith, canvas);                        break;                    case 1:                        left = centerWidth - pad - dp2px(15);                        right = centerWidth - pad + dp2px(15);                        setRectF(i, left, right, allHeight, centerHeith, canvas);                        break;                    case 2:                        left = centerWidth - dp2px(15);                        right = centerWidth + dp2px(15);                        setRectF(i, left, right, allHeight, centerHeith, canvas);                        break;                    case 3:                        left = centerWidth + pad - dp2px(15);                        right = centerWidth + pad + dp2px(15);                        setRectF(i, left, right, allHeight, centerHeith, canvas);                        break;                    case 4:                        left = centerWidth + pad * 2 - dp2px(15);                        right = centerWidth + pad * 2 + dp2px(15);                        setRectF(i, left, right, allHeight, centerHeith, canvas);                        break;                }            }        }    }    private void setRectF(int i, int left, int right, int allHeight, int centerHeith, Canvas canvas) {        //每个view的高度        float viewHeight = (thisPrice[i] / getMax(thisPrice)) * allHeight;        rectF = new RectF();        rectF.left = left;        rectF.right = right;        DecimalFormat df = new DecimalFormat("######0.00");        String price = df.format(thisPrice[i]);        float x_1 = textPaint.measureText(price) / 2;        float x_2 = textPaint.measureText(date[i] + "") / 2;        if (thisPrice[i] >= 0) {            cylinder.setColor(ColorUtils.RED);            textPaint.setColor(ColorUtils.RED);            rectF.top = centerHeith - viewHeight;            rectF.bottom = centerHeith;            canvas.drawText(price + "", left + dp2px(15) - x_1, centerHeith + dp2px(20), textPaint);        } else {            cylinder.setColor(ColorUtils.GREEN);            textPaint.setColor(ColorUtils.GREEN);            rectF.top = centerHeith;            rectF.bottom = centerHeith - viewHeight;            canvas.drawText(price + "", left + dp2px(15) - x_1, centerHeith - dp2px(6), textPaint);        }        textPaint.setColor(ColorUtils.GRAY);        canvas.drawText(date[i] + "", left + dp2px(15) - x_2, mTotalHeight - dp2px(20), textPaint);        canvas.drawRect(rectF, cylinder);    }    // dp转换px    private int dp2px(int dp) {        // px = dp * 密度比        float density = getContext().getResources().getDisplayMetrics().density;// 0.75 1 1.5 2        return (int) (dp * density + 0.5f);// 4舍5入    }    public static float getMax(float[] arr) {        float[] arrs = new float[5];        arrs[0] = Math.abs(arr[0]);        arrs[1] = Math.abs(arr[1]);        arrs[2] = Math.abs(arr[2]);        arrs[3] = Math.abs(arr[3]);        arrs[4] = Math.abs(arr[4]);        Arrays.sort(arrs);        return arrs[arrs.length - 1];    }}